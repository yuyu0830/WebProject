계산기
<br>>>> - 이름 : 타자연습
<br> - 작성 : Python tkinter 모듈
<br> - 제작 기간 : 1일
<br> - 제작 시기 : 21년 5월
<br> - 설명 : tkinter라고 하는 인터페이스 모듈을 통해 제작한 프로그램이다. 시작 버튼을 누르고 입력칸에 제시된 문장을 따라 적으면 자동 계산하여 타수와 정확도를 보여준다.
<br>>>>from tkinter import *
<br>import math
<br>
<br>#변수
<br>TITLE = "계산기"
<br>SIZE = "270x250+400+100"
<br>x = [10, 75, 140, 205]
<br>y = list()
<br>temp = 0
<br>
<br>for i in range(8):
<br>&emsp;y.append(temp+10)
<br>&emsp;temp += 30
<br>&emsp;
<br>sign_list = ['+', '-', '*', '/']
<br>number = 0
<br>numbers = list()
<br>signs = list()
<br>memory = 0
<br>
<br>#함수
<br>def num_pressed(value):
<br>&emsp;global number
<br>&emsp;state = 0
<br>&emsp;if len(e3.get()) == 0:
<br>&emsp;&emsp;e3.insert(0, value)
<br>&emsp;&emsp;number = value
<br>&emsp;else:
<br>&emsp;&emsp;try:
<br>&emsp;&emsp;&emsp;int(e3.get())
<br>&emsp;&emsp;&emsp;temp_num = int(e3.get())
<br>&emsp;&emsp;&emsp;state = 0
<br>&emsp;&emsp;except ValueError:
<br>&emsp;&emsp;&emsp;temp_num = float(e3.get())
<br>&emsp;&emsp;&emsp;state = 1
<br>&emsp;&emsp;e3.delete(0, 'end')
<br>&emsp;&emsp;if state == 0:
<br>&emsp;&emsp;&emsp;number = temp_num * 10 + value
<br>&emsp;&emsp;&emsp;e3.insert(0, number)
<br>&emsp;&emsp;&emsp;
<br>def sign_pressed(value):
<br>&emsp;global number
<br>&emsp;global numbers
<br>&emsp;global signs
<br>&emsp;global sign_list
<br>&emsp;if number != 0:
<br>&emsp;&emsp;e3.delete(0, 'end')
<br>&emsp;&emsp;numbers.append(number)
<br>&emsp;&emsp;signs.append(sign_list[value])
<br>&emsp;&emsp;e1.delete(0, 'end')
<br>&emsp;&emsp;for i in reversed(range(len(numbers))):
<br>&emsp;&emsp;&emsp;e1.insert(0, signs[i])
<br>&emsp;&emsp;&emsp;e1.insert(0, numbers[i])
<br>&emsp;&emsp;number = 0
<br>&emsp;elif len(signs) != 0:
<br>&emsp;&emsp;e1.delete(0, 'end')
<br>&emsp;&emsp;signs.pop(len(signs) - 1)
<br>&emsp;&emsp;signs.append(sign_list[value])
<br>&emsp;&emsp;for i in reversed(range(len(numbers))):
<br>&emsp;&emsp;&emsp;e1.insert(0, signs[i])
<br>&emsp;&emsp;&emsp;e1.insert(0, numbers[i])
<br>&emsp;&emsp;number = 0
<br>&emsp;
<br>def button_pressed(value):
<br>&emsp;global number
<br>&emsp;global numbers
<br>&emsp;global signs
<br>&emsp;if value == 0:
<br>&emsp;&emsp;number = math.trunc(number / 10)
<br>&emsp;&emsp;e3.delete(0, 'end')
<br>&emsp;&emsp;e3.insert(0, number)
<br>&emsp;elif value == 1:
<br>&emsp;&emsp;number = 0
<br>&emsp;&emsp;e3.delete(0, 'end')
<br>&emsp;elif value == 2:
<br>&emsp;&emsp;number = 0
<br>&emsp;&emsp;numbers.clear()
<br>&emsp;&emsp;signs.clear()
<br>&emsp;&emsp;e1.delete(0, 'end')
<br>&emsp;&emsp;e3.delete(0, 'end')
<br>
<br>def equal():
<br>&emsp;global numbers
<br>&emsp;global signs
<br>&emsp;global number
<br>&emsp;i = 0
<br>&emsp;result = 0
<br>&emsp;e1.delete(0, 'end')
<br>&emsp;e3.delete(0, 'end')
<br>&emsp;e1.insert(0, number)
<br>&emsp;for i in reversed(range(len(numbers))):
<br>&emsp;&emsp;e1.insert(0, signs[i])
<br>&emsp;&emsp;e1.insert(0, numbers[i])
<br>&emsp;length = len(signs)
<br>&emsp;numbers.append(number)
<br>&emsp;while i != length:
<br>&emsp;&emsp;if signs[i] == '*':
<br>&emsp;&emsp;&emsp;numbers[i] = numbers[i] * numbers[i + 1]
<br>&emsp;&emsp;&emsp;signs.pop(i)
<br>&emsp;&emsp;&emsp;numbers.pop(i+1)
<br>&emsp;&emsp;&emsp;length -= 1
<br>&emsp;&emsp;&emsp;i = 0
<br>&emsp;&emsp;elif signs[i] == '/':
<br>&emsp;&emsp;&emsp;numbers[i] = numbers[i] / numbers[i + 1]
<br>&emsp;&emsp;&emsp;signs.pop(i)
<br>&emsp;&emsp;&emsp;numbers.pop(i+1)
<br>&emsp;&emsp;&emsp;length -= 1
<br>&emsp;&emsp;&emsp;i = 0
<br>&emsp;&emsp;else:
<br>&emsp;&emsp;&emsp;i += 1
<br>&emsp;print(numbers, signs)
<br>&emsp;result = numbers[0]
<br>&emsp;for i in range(len(signs)):
<br>&emsp;&emsp;if signs[i] == '+':
<br>&emsp;&emsp;&emsp;result += numbers[i + 1]
<br>&emsp;&emsp;elif signs[i] == '-':
<br>&emsp;&emsp;&emsp;result -= numbers[i + 1]
<br>&emsp;e2.insert(0, result)
<br>&emsp;numbers.clear()
<br>&emsp;signs.clear()
<br>
<br>def memory_pressed(value):
<br>&emsp;if value == 0:
<br>&emsp;&emsp;
<br>
<br>window = Tk()
<br>window.title(TITLE)
<br>window.geometry(SIZE)
<br>window.resizable(False, False)
<br>
<br>e1 = Entry(window, width = 35)
<br>e1.place(x = 10, y = y[0])
<br>e2 = Entry(window, width = 15)
<br>e2.place(x = 10, y = y[1])
<br>e3 = Entry(window, width = 15)
<br>e3.place(x = 150, y = y[1])
<br>
<br>m_mc = Button(window, text = "MC", width = 6, command = lambda:memory_pressed(3)).place(x = x[0], y = y[2])
<br>m_mr = Button(window, text = "MR", width = 6, command = lambda:memory_pressed(2)).place(x = x[1], y = y[2])
<br>m_pl = Button(window, text = "M+", width = 6, command = lambda:memory_pressed(1)).place(x = x[2], y = y[2])
<br>m_mi = Button(window, text = "M-", width = 6, command = lambda:memory_pressed(0)).place(x = x[3], y = y[2])
<br>b_ac = Button(window, text = "AC", width = 6, command = lambda:button_pressed(2)).place(x = x[0], y = y[3])
<br>b_cl = Button(window, text = "C", width = 6, command = lambda:button_pressed(1)).place(x = x[1], y = y[3])
<br>b_dl = Button(window, text = "<=", width = 6, command = lambda:button_pressed(0)).place(x = x[2], y = y[3])
<br>b_eq = Button(window, text = "=", width = 6, command = lambda:equal()).place(x = x[3], y = y[7])
<br>s_di = Button(window, text = "/", width = 6, command = lambda:sign_pressed(3)).place(x = x[3], y = y[3])
<br>s_mu = Button(window, text = "*", width = 6, command = lambda:sign_pressed(2)).place(x = x[3], y = y[4])
<br>s_mi = Button(window, text = "-", width = 6, command = lambda:sign_pressed(1)).place(x = x[3], y = y[5])
<br>s_pl = Button(window, text = "+", width = 6, command = lambda:sign_pressed(0)).place(x = x[3], y = y[6])
<br>n_do = Button(window, text = ".", width = 6).place(x = x[2], y = y[7])
<br>n_pm = Button(window, text = "+-", width = 6).place(x = x[0], y = y[7])
<br>n9 = Button(window, text = "9", width = 6, command = lambda:num_pressed(9)).place(x = x[2], y = y[4])
<br>n8 = Button(window, text = "8", width = 6, command = lambda:num_pressed(8)).place(x = x[1], y = y[4])
<br>n7 = Button(window, text = "7", width = 6, command = lambda:num_pressed(7)).place(x = x[0], y = y[4])
<br>n6 = Button(window, text = "6", width = 6, command = lambda:num_pressed(6)).place(x = x[2], y = y[5])
<br>n5 = Button(window, text = "5", width = 6, command = lambda:num_pressed(5)).place(x = x[1], y = y[5])
<br>n4 = Button(window, text = "4", width = 6, command = lambda:num_pressed(4)).place(x = x[0], y = y[5])
<br>n3 = Button(window, text = "3", width = 6, command = lambda:num_pressed(3)).place(x = x[2], y = y[6])
<br>n2 = Button(window, text = "2", width = 6, command = lambda:num_pressed(2)).place(x = x[1], y = y[6])
<br>n1 = Button(window, text = "1", width = 6, command = lambda:num_pressed(1)).place(x = x[0], y = y[6])
<br>n0 = Button(window, text = "0", width = 6, command = lambda:num_pressed(0)).place(x = x[1], y = y[7])
<br>>>>파이썬으로 텍스트 파일을 사용하는 방법을 익혔고 정말 무궁무진한 것들이 가능하다는 것을 느끼게 되었다.
<br>정확도를 계산하는 공식을 만드는 과정과 외부 텍스트 파일과 연동하는 기능을 직접 만들며 많은 것을 배웠다.
<br>