P-man
<br>>>>
 - 이름 : P-man
<br> - 작성 : Python pygame 모듈
<br> - 제작 기간 : 2주
<br> - 제작 시기 : 21년 4월
<br> - 설명 : pygame라는 파이썬으로 게임 만드는 모듈을 이용하여 만든 게임이아. 팩맨 이라는 게임을 모티브로 하여 제작한 게임이다. 당시 기술력이 부족하여 적까지 구현하지는 못했지만 플레이어가 맵의 '소울'을 먹어 점수를 올리는 게임이다.
<br>>>>
import pygame as pg
<br>import sys
<br>import random
<br>from setting import *
<br>from mapping import *
<br>
<br>class game:
<br>&emsp;def __init__(self):
<br>&emsp;&emsp;#초기화 및 화면 설정
<br>&emsp;&emsp;pg.init()
<br>&emsp;&emsp;pg.display.set_caption(TITLE)
<br>&emsp;&emsp;self.clock = pg.time.Clock()
<br>&emsp;&emsp;self.bg = pg.image.load("background.png")
<br>&emsp;&emsp;self.board = pg.image.load("board.png")
<br>&emsp;&emsp;self.board = pg.transform.scale(self.board, [250, 950])
<br>&emsp;&emsp;self.bg = pg.transform.scale(self.bg, SIZE)
<br>&emsp;&emsp;self.font = pg.font.SysFont("arial", 48, True, False)
<br>&emsp;&emsp;self.new()
<br>
<br>&emsp;def new(self):
<br>&emsp;&emsp;#점수 등 게임 변수 설정
<br>&emsp;&emsp;self.running = True
<br>&emsp;&emsp;self.score = 0
<br>&emsp;&emsp;self.stage = 1
<br>&emsp;&emsp;self.life = 2
<br>&emsp;&emsp;self.time = 0
<br>&emsp;&emsp;self.clear = False
<br>&emsp;&emsp;self.sol_count = 0
<br>&emsp;&emsp;screen.blit(self.bg, [0, 0])
<br>
<br>&emsp;&emsp;#맵 생성
<br>&emsp;&emsp;self.mapping()
<br>
<br>&emsp;&emsp;#플레이어 및 오브젝트 생성
<br>&emsp;&emsp;self.player = Player(450, 450)
<br>&emsp;&emsp;self.player_sprites = pg.sprite.Group()
<br>&emsp;&emsp;self.player_sprites.add = self.player
<br>&emsp;&emsp;self.soul_sprites = pg.sprite.Group()
<br>&emsp;&emsp;self.brick_sprites = pg.sprite.Group()
<br>
<br>&emsp;&emsp;#텍스트 생성
<br>&emsp;&emsp;self.t_sco = text()
<br>&emsp;&emsp;self.t_sta = text()
<br>&emsp;&emsp;self.t_lif = text()
<br>
<br>&emsp;def mapping(self):
<br>&emsp;&emsp;#22 (20 - 1 - 1) * 22 숫자맵 생성
<br>&emsp;&emsp;#0 = 빈공간, 1 = 소울, 2 = 벽
<br>&emsp;&emsp;self.m = [[0]*21 for _ in range(21)]
<br>&emsp;&emsp;self.brk = []
<br>&emsp;&emsp;self.sol = []
<br>
<br>&emsp;&emsp;#외벽 생성(2)
<br>&emsp;&emsp;for i in range(1, 20):
<br>&emsp;&emsp;&emsp;self.m[i][1] = 2
<br>&emsp;&emsp;&emsp;self.m[i][19] = 2
<br>&emsp;&emsp;&emsp;self.m[1][i] = 2
<br>&emsp;&emsp;&emsp;self.m[19][i] = 2
<br>
<br>&emsp;&emsp;#내부벽 생성(2)
<br>&emsp;&emsp;self.brick_make()
<br>
<br>&emsp;&emsp;#소울 위치 생성(1)
<br>&emsp;&emsp;for i in range(2, 20):
<br>&emsp;&emsp;&emsp;for j in range(2, 20):
<br>&emsp;&emsp;&emsp;&emsp;if self.m[i][j] != 2:
<br>&emsp;&emsp;&emsp;&emsp;&emsp;self.m[i][j] = 1
<br>
<br>&emsp;&emsp;#소울, 벽 위치 보내기
<br>&emsp;&emsp;for i in range(1, 20):
<br>&emsp;&emsp;&emsp;for j in range(1, 20):
<br>&emsp;&emsp;&emsp;&emsp;if self.m[i][j] == 1:
<br>&emsp;&emsp;&emsp;&emsp;&emsp;self.sol.append([i, j])
<br>&emsp;&emsp;&emsp;&emsp;if self.m[i][j] == 2:
<br>&emsp;&emsp;&emsp;&emsp;&emsp;self.brk.append([i, j])
<br>&emsp;&emsp;
<br>&emsp;&emsp;self.brick = brick(self.brk)
<br>&emsp;&emsp;self.soul = soul(self.sol)
<br>
<br>&emsp;def brick_make(self):
<br>&emsp;&emsp;self.m = mapping(self.m, self.stage)
<br>
<br>&emsp;def update(self):
<br>&emsp;&emsp;#모든 객체 업데이트
<br>&emsp;&emsp;self.t_sco.score(self.score)
<br>&emsp;&emsp;self.t_lif.life(self.life)
<br>&emsp;&emsp;self.t_sta.stage(self.stage)
<br>&emsp;&emsp;self.player.update()
<br>&emsp;&emsp;self.soul.collision_check(self.player.rect)
<br>&emsp;&emsp;self.sol_count = 0
<br>&emsp;&emsp;self.sol.clear()
<br>&emsp;&emsp;for i in range(1, 20):
<br>&emsp;&emsp;&emsp;for j in range(1, 20):
<br>&emsp;&emsp;&emsp;&emsp;if self.m[i][j] == 1:
<br>&emsp;&emsp;&emsp;&emsp;&emsp;self.sol.append([i, j])
<br>&emsp;&emsp;&emsp;&emsp;&emsp;self.sol_count += 1
<br>&emsp;&emsp;if self.sol_count == 0:
<br>&emsp;&emsp;&emsp;self.clear = True
<br>&emsp;&emsp;self.soul.update(self.sol)
<br>&emsp;&emsp;
<br>&emsp;
<br>&emsp;def draw(self):
<br>&emsp;&emsp;#모든 객체 스크린에 그리기
<br>&emsp;&emsp;screen.blit(self.bg, [0, 0])
<br>&emsp;&emsp;screen.blit(self.board, [950, 0])
<br>&emsp;&emsp;self.brick.draw()
<br>&emsp;&emsp;self.soul.draw()
<br>&emsp;&emsp;self.player.draw()
<br>&emsp;&emsp;self.t_sco.draw(1050, 350)
<br>&emsp;&emsp;self.t_sta.draw(1060, 160)
<br>&emsp;&emsp;self.t_lif.draw(1060, 525)
<br>&emsp;&emsp;pg.display.update()
<br>
<br>&emsp;def keys(self, event):
<br>&emsp;&emsp;if event.type == pg.KEYDOWN:
<br>&emsp;&emsp;&emsp;if event.key == ord('c'):
<br>&emsp;&emsp;&emsp;&emsp;self.new()
<br>&emsp;&emsp;&emsp;&emsp;
<br>class Player():
<br>&emsp;def __init__(self, x, y):
<br>&emsp;&emsp;self.index = 1
<br>&emsp;&emsp;self.img = False
<br>&emsp;&emsp;self.frames = []
<br>&emsp;&emsp;self.frames.append(pg.image.load('player_1.png'))
<br>&emsp;&emsp;self.frames.append(pg.image.load('player_2.png'))
<br>&emsp;&emsp;self.frames.append(pg.image.load('player_3.png'))
<br>&emsp;&emsp;self.frames.append(pg.image.load('player_4.png'))
<br>&emsp;&emsp;self.frames.append(pg.image.load('player_5.png'))
<br>&emsp;&emsp;self.image = self.frames[self.index]
<br>&emsp;&emsp;self.image = pg.transform.scale(self.image, [40, 40])
<br>&emsp;&emsp;self.rect = self.image.get_rect()
<br>&emsp;&emsp;self.rect.x = x #left
<br>&emsp;&emsp;self.rect.y = y #top
<br>&emsp;&emsp;self.x_move = 0
<br>&emsp;&emsp;self.y_move = 0
<br>&emsp;&emsp;self.last_key = 0
<br>&emsp;&emsp;self.up = False
<br>&emsp;&emsp;self.down = False
<br>&emsp;&emsp;self.left = False
<br>&emsp;&emsp;self.right = False
<br>&emsp;&emsp;self.m = False
<br>&emsp;&emsp;self.t_check = 0
<br>&emsp;&emsp;self.y_gap = 0
<br>&emsp;&emsp;self.x_gap = 0
<br>&emsp;&emsp;
<br>&emsp;def update(self):
<br>&emsp;&emsp;self.x = round(self.rect.x / 50) + 1
<br>&emsp;&emsp;self.y = round(self.rect.y / 50) + 1
<br>&emsp;&emsp;self.up_block = g.m[self.x][self.y - 1]
<br>&emsp;&emsp;self.down_block = g.m[self.x][self.y + 1]
<br>&emsp;&emsp;self.left_block = g.m[self.x - 1][self.y]
<br>&emsp;&emsp;self.right_block = g.m[self.x + 1][self.y]
<br>
<br>&emsp;&emsp;#근처 벽돌 확인
<br>&emsp;&emsp;if  self.up_block == 2:
<br>&emsp;&emsp;&emsp;self.up = False
<br>&emsp;&emsp;else :
<br>&emsp;&emsp;&emsp;self.up = True
<br>&emsp;&emsp;&emsp;
<br>&emsp;&emsp;if  self.down_block == 2:
<br>&emsp;&emsp;&emsp;self.down = False
<br>&emsp;&emsp;else :
<br>&emsp;&emsp;&emsp;self.down = True
<br>&emsp;&emsp;
<br>&emsp;&emsp;if  self.left_block == 2:
<br>&emsp;&emsp;&emsp;self.left = False
<br>&emsp;&emsp;else :
<br>&emsp;&emsp;&emsp;self.left = True
<br>&emsp;&emsp;&emsp;
<br>&emsp;&emsp;if  self.right_block == 2:
<br>&emsp;&emsp;&emsp;self.right = False
<br>&emsp;&emsp;else :
<br>&emsp;&emsp;&emsp;self.right = True
<br>
<br>&emsp;&emsp;#움직임 설정
<br>&emsp;&emsp;self.x_gap = self.rect.x % 50
<br>&emsp;&emsp;self.y_gap = self.rect.y % 50
<br>&emsp;&emsp;if self.last_key == pg.K_UP and self.up == True:
<br>&emsp;&emsp;&emsp;self.x_move = 0
<br>&emsp;&emsp;&emsp;self.y_move = 0
<br>&emsp;&emsp;&emsp;if self.x_gap == 0:
<br>&emsp;&emsp;&emsp;&emsp;self.y_move = -SPEED
<br>&emsp;&emsp;&emsp;elif self.x_gap < 25:
<br>&emsp;&emsp;&emsp;&emsp;if self.x_gap >= SPEED:
<br>&emsp;&emsp;&emsp;&emsp;&emsp;self.x_move = -SPEED
<br>&emsp;&emsp;&emsp;&emsp;elif self.x_gap < 5:
<br>&emsp;&emsp;&emsp;&emsp;&emsp;self.x_move = -self.x_gap
<br>&emsp;&emsp;&emsp;elif self.x_gap >= 25:
<br>&emsp;&emsp;&emsp;&emsp;if self.x_gap >= SPEED:
<br>&emsp;&emsp;&emsp;&emsp;&emsp;self.x_move = SPEED
<br>&emsp;&emsp;&emsp;&emsp;elif self.x_gap < 5:
<br>&emsp;&emsp;&emsp;&emsp;&emsp;self.x_move = self.x_gap
<br>
<br>&emsp;&emsp;elif self.last_key == pg.K_DOWN and self.down == True:
<br>&emsp;&emsp;&emsp;self.x_move = 0
<br>&emsp;&emsp;&emsp;self.y_move = 0
<br>&emsp;&emsp;&emsp;if self.x_gap == 0:
<br>&emsp;&emsp;&emsp;&emsp;self.y_move = SPEED
<br>&emsp;&emsp;&emsp;elif self.x_gap < 25:
<br>&emsp;&emsp;&emsp;&emsp;if self.x_gap >= SPEED:
<br>&emsp;&emsp;&emsp;&emsp;&emsp;self.x_move = -SPEED
<br>&emsp;&emsp;&emsp;&emsp;elif self.x_gap < 5:
<br>&emsp;&emsp;&emsp;&emsp;&emsp;self.x_move = -self.x_gap
<br>&emsp;&emsp;&emsp;elif self.x_gap >= 25:
<br>&emsp;&emsp;&emsp;&emsp;if self.x_gap >= SPEED:
<br>&emsp;&emsp;&emsp;&emsp;&emsp;self.x_move = SPEED
<br>&emsp;&emsp;&emsp;&emsp;elif self.x_gap < 5:
<br>&emsp;&emsp;&emsp;&emsp;&emsp;self.x_move = self.x_gap
<br>
<br>&emsp;&emsp;elif self.last_key == pg.K_LEFT and self.left == True:
<br>&emsp;&emsp;&emsp;self.x_move = 0
<br>&emsp;&emsp;&emsp;self.y_move = 0
<br>&emsp;&emsp;&emsp;if self.y_gap == 0:
<br>&emsp;&emsp;&emsp;&emsp;self.x_move = -SPEED
<br>&emsp;&emsp;&emsp;elif self.y_gap < 25:
<br>&emsp;&emsp;&emsp;&emsp;if self.y_gap >= SPEED:
<br>&emsp;&emsp;&emsp;&emsp;&emsp;self.y_move = -SPEED
<br>&emsp;&emsp;&emsp;&emsp;elif self.y_gap < 5:
<br>&emsp;&emsp;&emsp;&emsp;&emsp;self.y_move = -self.y_gap
<br>&emsp;&emsp;&emsp;elif self.y_gap >= 25:
<br>&emsp;&emsp;&emsp;&emsp;if self.y_gap >= SPEED:
<br>&emsp;&emsp;&emsp;&emsp;&emsp;self.y_move = SPEED
<br>&emsp;&emsp;&emsp;&emsp;elif self.y_gap < 5:
<br>&emsp;&emsp;&emsp;&emsp;&emsp;self.y_move = self.y_gap
<br>
<br>&emsp;&emsp;elif self.last_key == pg.K_RIGHT and self.right == True:
<br>&emsp;&emsp;&emsp;self.x_move = 0
<br>&emsp;&emsp;&emsp;self.y_move = 0
<br>&emsp;&emsp;&emsp;if self.y_gap == 0:
<br>&emsp;&emsp;&emsp;&emsp;self.x_move = SPEED
<br>&emsp;&emsp;&emsp;elif self.y_gap < 25:
<br>&emsp;&emsp;&emsp;&emsp;if self.y_gap >= SPEED:
<br>&emsp;&emsp;&emsp;&emsp;&emsp;self.y_move = -SPEED
<br>&emsp;&emsp;&emsp;&emsp;elif self.y_gap < 5:
<br>&emsp;&emsp;&emsp;&emsp;&emsp;self.y_move = -self.y_gap
<br>&emsp;&emsp;&emsp;elif self.y_gap >= 25:
<br>&emsp;&emsp;&emsp;&emsp;if self.y_gap >= SPEED:
<br>&emsp;&emsp;&emsp;&emsp;&emsp;self.y_move = SPEED
<br>&emsp;&emsp;&emsp;&emsp;elif self.y_gap < 5:
<br>&emsp;&emsp;&emsp;&emsp;&emsp;self.y_move = self.y_gap
<br>&emsp;&emsp;&emsp;&emsp;&emsp;
<br>&emsp;&emsp;#충돌 확인
<br>&emsp;&emsp;if self.y_move < 0 and self.up == False and self.rect.y % 50 == 0:
<br>&emsp;&emsp;&emsp;self.y_move = 0
<br>&emsp;&emsp;elif self.y_move > 0 and self.down == False and self.rect.y % 50 == 0:
<br>&emsp;&emsp;&emsp;self.y_move = 0
<br>&emsp;&emsp;elif self.x_move < 0 and self.left == False and self.rect.x % 50 == 0:
<br>&emsp;&emsp;&emsp;self.x_move = 0
<br>&emsp;&emsp;elif self.x_move > 0 and self.right == False and self.rect.x % 50 == 0:
<br>&emsp;&emsp;&emsp;self.x_move = 0
<br>
<br>&emsp;&emsp;if self.x_move != 0 or self.y_move != 0:
<br>&emsp;&emsp;&emsp;self.m = True
<br>&emsp;&emsp;else:
<br>&emsp;&emsp;&emsp;self.m = False
<br>
<br>&emsp;&emsp;self.load_image()
<br>&emsp;&emsp;&emsp;
<br>&emsp;&emsp;self.rect.x += self.x_move
<br>&emsp;&emsp;self.rect.y += self.y_move
<br>
<br>&emsp;def load_image(self):
<br>&emsp;&emsp;if self.y_move < 0:
<br>&emsp;&emsp;&emsp;self.index = 4
<br>&emsp;&emsp;elif self.y_move > 0:
<br>&emsp;&emsp;&emsp;self.index = 2
<br>&emsp;&emsp;elif self.x_move > 0:
<br>&emsp;&emsp;&emsp;self.index = 1
<br>&emsp;&emsp;elif self.x_move < 0:
<br>&emsp;&emsp;&emsp;self.index = 3
<br>&emsp;&emsp;&emsp;&emsp;
<br>&emsp;&emsp;if self.m == True:
<br>&emsp;&emsp;&emsp;if self.t_check > 5:
<br>&emsp;&emsp;&emsp;&emsp;self.t_check = 0
<br>&emsp;&emsp;&emsp;&emsp;if self.img == True:
<br>&emsp;&emsp;&emsp;&emsp;&emsp;self.img = False
<br>&emsp;&emsp;&emsp;&emsp;else:
<br>&emsp;&emsp;&emsp;&emsp;&emsp;self.img = True
<br>&emsp;&emsp;&emsp;&emsp;&emsp;
<br>&emsp;&emsp;if self.img == True:
<br>&emsp;&emsp;&emsp;self.image = self.frames[0]
<br>&emsp;&emsp;elif self.img == False:
<br>&emsp;&emsp;&emsp;self.image = self.frames[self.index]
<br>
<br>&emsp;&emsp;self.image = pg.transform.scale(self.image, [40, 40])
<br>&emsp;
<br>&emsp;def move(self, event):
<br>&emsp;&emsp;if event.type == pg.KEYDOWN:
<br>&emsp;&emsp;&emsp;self.last_key = event.key
<br>&emsp;&emsp;   
<br>&emsp;def draw(self):
<br>&emsp;&emsp;screen.blit(self.image, [self.rect.x + 5, self.rect.y + 5])
<br>
<br>class soul():
<br>&emsp;def __init__(self, sol):
<br>&emsp;&emsp;self.image = pg.image.load("soul.png")
<br>&emsp;&emsp;self.image = pg.transform.scale(self.image, [10, 10])
<br>&emsp;&emsp;self.rect = self.image.get_rect()
<br>&emsp;&emsp;self.num = sol
<br>
<br>&emsp;def collision_check(self, rect):
<br>&emsp;&emsp;for i in self.num:
<br>&emsp;&emsp;&emsp;self.rect[0] = int((i[0] - 1) * 50 + 20)
<br>&emsp;&emsp;&emsp;self.rect[1] = int((i[1] - 1) * 50 + 20)
<br>&emsp;&emsp;&emsp;self.rect[2] = 10
<br>&emsp;&emsp;&emsp;self.rect[3] = 10
<br>&emsp;&emsp;&emsp;if g.player.rect.colliderect(self.rect):
<br>&emsp;&emsp;&emsp;&emsp;g.m[i[0]][i[1]] = 0
<br>&emsp;&emsp;&emsp;&emsp;g.score += 10
<br>
<br>&emsp;def update(self, sol):
<br>&emsp;&emsp;self.num = sol
<br>
<br>&emsp;def draw(self):
<br>&emsp;&emsp;for i in self.num:
<br>&emsp;&emsp;&emsp;x = int((i[0] - 1) * 50 + 20)
<br>&emsp;&emsp;&emsp;y = int((i[1] - 1) * 50 + 20)
<br>&emsp;&emsp;&emsp;screen.blit(self.image, [x, y])
<br>
<br>class brick():
<br>&emsp;def __init__(self, brk):
<br>&emsp;&emsp;self.image = pg.image.load("Brick.png")
<br>&emsp;&emsp;self.rect = self.image.get_rect()
<br>&emsp;&emsp;self.num = brk
<br>
<br>&emsp;def draw(self):
<br>&emsp;&emsp;for i in self.num:
<br>&emsp;&emsp;&emsp;screen.blit(self.image, [(i[0]-1) * 50, (i[1]-1) * 50])
<br>
<br>class text():
<br>&emsp;def score(self, score):
<br>&emsp;&emsp;self.text = g.font.render("{}".format(score), True, BLACK)
<br>
<br>&emsp;def stage(self, stage):
<br>&emsp;&emsp;self.text = g.font.render("{}".format(stage), True, BLACK)
<br>
<br>&emsp;def life(self, life):
<br>&emsp;&emsp;self.text = g.font.render("{}".format(life), True, BLACK)
<br>&emsp;
<br>&emsp;def draw(self, x, y):
<br>&emsp;&emsp;screen.blit(self.text, [x, y])
<br>
<br>screen = pg.display.set_mode(SIZE)
<br>g = game()
<br>
<br>while g.running:
<br>&emsp;g.clock.tick(30)
<br>&emsp;for event in pg.event.get():
<br>&emsp;&emsp;if event.type == pg.QUIT:
<br>&emsp;&emsp;&emsp;g.running = False
<br>&emsp;&emsp;&emsp;g.keys(event)
<br>&emsp;&emsp;g.player.move(event)
<br>&emsp;g.player.t_check += 1
<br>&emsp;g.update()
<br>&emsp;g.draw()
<br>&emsp;if g.clear == True:
<br>&emsp;&emsp;print("성공!")
<br>pg.quit()
<br>sys.exit()
<br>>>>
처음 만들어보는 게임인데다 pygame라는 모듈을 다루는 예제가 인터넷에도 많지 않아 정말 많은 시행착오를 겪고정말 많은 버그랑 싸워가며 만든 게임이다.
<br>파이썬에서 class 사용법, 객체지향 프로그램에 대한 이해, 프로그램의 루프에 대한 공부가 되었으며 게임 내적인 충돌판정, 요소 등과 게임의 전반적인 이해를 얻게 된 좋은 기회였다.
<br>