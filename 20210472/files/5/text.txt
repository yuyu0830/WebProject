강의&과제
<br>>>> - 이름 : 강의&과제 확인 프로그램
<br> - 작성 : Python BeautifulSoup, Selenium 모듈
<br> - 제작 기간 : 2주
<br> - 제작 시기 : 21년 5월
<br> - 설명 : 파이썬의 BeaitifulSoup, Selenium 2가지 모듈을 이용하여 만든 프로그램이다. 이 두가지 모듈은 웹페이지에서 정보를 가져오는 모듈이다. lms는 과제나 강의 영상 시청 여부를 알기가 불편하다. 이에 쉽게 확인할 수 있는 프로그램을 제작하였다.
<br>>>>from bs4 import BeautifulSoup as bs
<br>from selenium import webdriver
<br>from selenium.webdriver.common.by import By
<br>
<br>def html_reset():
<br>&emsp;html = driver.page_source
<br>&emsp;return bs(html, 'html.parser')
<br>
<br>#ID, 비밀번호 입력
<br>ID = ''
<br>PWD = ''
<br>
<br>#변수 선언
<br>count = 0
<br>all_see = True
<br>subject = [[], [], []] #대분류, 전체, 과목
<br>index = []
<br>status = []
<br>selector = ['.term_info', 'div.m-box2:nth-child(2) li', 'div.m-box2:nth-child(2) em']
<br>selector2 = ['span.wb-week', '.wb-on > div > div.wb-status', '.wb-off > div > div.wb-status']
<br>class_num = [[], [], []]
<br>temp_list = [[], [], []]
<br>
<br>#드라이버
<br>webdriver_options = webdriver.ChromeOptions()
<br>#webdriver_options .add_argument('headless')
<br>driver = webdriver.Chrome(executable_path='chromedriver', options=webdriver_options)
<br>driver.implicitly_wait(time_to_wait=5)
<br>driver.get('https://lms.kit.ac.kr/ilos/main/member/login_form.acl')
<br>driver.find_element(By.ID, 'usr_id').send_keys(ID)
<br>driver.find_element(By.ID, 'usr_pwd').send_keys(PWD)
<br>driver.find_element(By.XPATH, '//*[@id="login_btn"]').click()
<br>
<br>soup = html_reset()
<br>
<br>for i in range(3): #과목 개수 입력
<br>&emsp;temp = soup.select(selector[i])
<br>&emsp;for j in temp:
<br>&emsp;&emsp;subject[i].append(j.text.replace(' ','').replace('\n', ''))
<br>&emsp;&emsp;
<br>for i in subject[0]: #대분류 위치
<br>&emsp;index.append(subject[1].index(i))
<br>index.append(len(subject[1]))
<br>
<br>#과목별 강의 수, 들은 여부 구하기
<br>for i in range(len(subject[1]) - 1):
<br>&emsp;if i not in index:
<br>&emsp;&emsp;link = '//*[@id="contentsIndex"]/div[2]/div[2]/ol/li[%d]/em' % (i + 1)
<br>&emsp;&emsp;if driver.find_element(By.XPATH, link).get_attribute('class') == 'sub_open':
<br>&emsp;&emsp;&emsp;driver.find_element(By.XPATH, link).click()
<br>&emsp;&emsp;&emsp;soup = html_reset()
<br>&emsp;&emsp;&emsp;for j in range(3):
<br>&emsp;&emsp;&emsp;&emsp;temp_list[j] = soup.select(selector2[j])
<br>&emsp;&emsp;&emsp;if type(temp_list[0]) != type(None):
<br>&emsp;&emsp;&emsp;&emsp;for j in range(3):
<br>&emsp;&emsp;&emsp;&emsp;&emsp;for k in range(len(temp_list[j])):
<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;class_num[j].append(temp_list[j][k].get_text())
<br>&emsp;&emsp;&emsp;if class_num[0] != []:
<br>&emsp;&emsp;&emsp;&emsp;for j in range(len(class_num[1])):
<br>&emsp;&emsp;&emsp;&emsp;&emsp;if class_num[1][j][1] == class_num[1][j][3]:
<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;class_num[1][j] = 1
<br>&emsp;&emsp;&emsp;&emsp;&emsp;else:
<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;class_num[1][j] = 0
<br>&emsp;&emsp;&emsp;&emsp;for j in range(len(class_num[2])):
<br>&emsp;&emsp;&emsp;&emsp;&emsp;if class_num[2][j][1] == class_num[2][j][3]:
<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;class_num[2][j] = 1
<br>&emsp;&emsp;&emsp;&emsp;&emsp;else:
<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;class_num[2][j] = 0
<br>&emsp;&emsp;&emsp;driver.find_element(By.XPATH, '//*[@id="submitList_div"]/div[1]').click()
<br>&emsp;&emsp;&emsp;driver.implicitly_wait(time_to_wait=100)
<br>&emsp;&emsp;&emsp;soup = html_reset()
<br>&emsp;&emsp;&emsp;report = soup.select_one('#total_nosubmit').get_text()
<br>&emsp;&emsp;&emsp;status.append([class_num[0], class_num[1], class_num[2], report])
<br>&emsp;&emsp;&emsp;temp_list = [[], [], []]
<br>&emsp;&emsp;&emsp;class_num = [[], [], []]
<br>&emsp;&emsp;&emsp;report = ''
<br>&emsp;&emsp;&emsp;driver.back()
<br>&emsp;&emsp;else:
<br>&emsp;&emsp;&emsp;status.append([[], [], [], '0'])
<br>
<br>#출력
<br>for i in range(len(subject[1]) - 1):
<br>&emsp;if i in index:
<br>&emsp;&emsp;print("%s" % subject[0][count])
<br>&emsp;&emsp;count += 1
<br>&emsp;else:
<br>&emsp;&emsp;print("  %s" % subject[2][i - count])
<br>&emsp;&emsp;if status[i - count][0] == []:
<br>&emsp;&emsp;&emsp;print("&emsp;영상 없음")
<br>&emsp;&emsp;else:
<br>&emsp;&emsp;&emsp;for j in range(len(status[i - count][1])):
<br>&emsp;&emsp;&emsp;&emsp;if status[i - count][1][j] == 0:
<br>&emsp;&emsp;&emsp;&emsp;&emsp;print("&emsp;%4s차 영상 미시청" % status[i - count][0][j])
<br>&emsp;&emsp;&emsp;&emsp;&emsp;all_see = False
<br>&emsp;&emsp;&emsp;if all_see == True:
<br>&emsp;&emsp;&emsp;&emsp;print("&emsp;시청 완료")
<br>&emsp;&emsp;&emsp;for j in range(len(status[i - count][2])):
<br>&emsp;&emsp;&emsp;&emsp;print("&emsp;%4s차 영상 미개봉" % status[i - count][0][j + len(status[i - count][1])])
<br>&emsp;&emsp;if status[i - count][3] != '0':
<br>&emsp;&emsp;&emsp;print("&emsp;미제출 과제 있음")
<br>&emsp;&emsp;else:
<br>&emsp;&emsp;&emsp;print("&emsp;과제 제출 완료")
<br>&emsp;all_see = True
<br>>>>만드는 과정이 정말 지옥과도 같았고 코드가 깔끔하지 못해 정말 많은 시행착오를 겪어야 했으며 제작 시기는 5월이지만 웹 프로젝트에 사용하려고 찾아보니 코드가 보이지 않아 결국 깃허브에 백업해둔 미완성 코드를 보고 다시 짜게 되었다.
<br>모듈들이 업데이트되어 코드를 다시 짜야하는 부분도 있었고 이해도 잘 안돼서 처음부터 다시 짰다. 결국 완성을 시켰고, 완성하고나니 2학기가 되어 비대면 수업이 거의 없어져 의미가 없는 프로그램이 되었다.
<br>오류를 찾는 법, 시행착오를 버티는 법, 멘탈을 잡는 법등 많은 공부가 되었다.
<br>>>>
<iframe width="980" height="532" src="https://www.youtube.com/embed/zjfv7r0aNeM?list=PLeWHcBUi6c1fnOcG7w04ukyeKeDv6ezUG" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>